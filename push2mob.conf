[main]
# Whether to daemonize or not.  If not, log_file output will be
# duplicated to stdout for debugging purpose.
daemon = 0

# Log file to use.
log_file =

# Minimum level of logs issued in the log file.
# One of "debug", "info", "warning", "error".
log_level = info

[apns]
# ZeroMQ bind address for APNS.
zmq_bind = 127.0.0.1:12195

# SQLite database where to save jobs that have been sent.
# (This can be the same as the GCM one.)
sqlite_db = apns.db

# Table prefix to use in the database.  Be sure to use something different
# for all services (including non-APNS services) if you use the same
# database file.
table_prefix = apns

# Where to log for APNS.  If empty, logs will go in daemon_log_file.
log_file =

# Minimum level of logs issued in the APNS log file.
# One of "debug", "info", "warning", "error".
log_level = debug

# Whether to propagate APNS logs to the main log file.
# Forced to 1 if log_file is empty.
log_propagate = 1

# File where root cert(s) can be found.  (PEM format)
# See README if you don't know where to get it.
cacerts_file = entrust_2048_ca.cer

# File containing the certificate Apple issued for you.  (PEM format)
cert_file = mycert.pem

# File containing the private key for the above certificate.
# Both may be contained in the same file.  (PEM format)
key_file = mykey.pem

# What device token format will be used for the feedback command.
# Errors will also use this format.  Either "base64" or "hex".
device_token_format = base64

#
# Push.
#

# Push gateway.
push_gateway = gateway.push.apple.com:2195
#push_gateway = gateway.sandbox.push.apple.com:2195

# Number of parallel workers sending notifications to APNS.
push_concurrency = 1

# Max wait for an error response after each notification sending.
# Waiting after each sending is not mandatory and will reduce the
# overall pace.  However this avoids pipelining, giving a chance to
# APNS to send back a possible error response for each.  Otherwise
# APNS may only return a message once in a while for notifications
# in the pipeline.  (seconds, may be a fractional number)
push_max_error_wait = 0.05

#
# Feedback.
#

# Feedback gateway.
feedback_gateway = feedback.push.apple.com:2196
#feedback_gateway = feedback.sandbox.push.apple.com:2196

# Check frequency. (seconds, may be a fractional number)
feedback_frequency = 60

[gcm]
# ZeroMQ bind address for GCM.
zmq_bind = 127.0.0.1:12196

# SQLite database where to save jobs that have been sent.
# (This can be the same as the APNS one.)
sqlite_db = gcm.db

# Table prefix to use in the database.  Be sure to use something different
# for all services (including non-GCM services) if you use the same
# database file.
table_prefix = gcm

# Where to log for GCM.  If empty, logs will go in daemon_log_file.
log_file =

# Minimum level of logs issued in the GCM log file.
# One of "debug", "info", "warning", "error".
log_level = debug

# Whether to propagate GCM logs to the main log file.
# Forced to 1 if log_file is empty.
log_propagate = 1

# GCM server URL.
server_url = https://android.googleapis.com/gcm/send

# API Key which identifies your application.
api_key = AIzaSyB-1uEai2WiUapxCs2Q0GZYzPu7Udno5aA

# Number of parallel workers dealing with GCM.
concurrency = 1

# Maximum retries to send a notification.  Each retry will be delayed by
# the following amount of time in seconds (N is the retry count, jitter is
# a random amount of time between 0 and 1 second):
# max("Retry-After:" header, 2^N + jitter)
max_retries = 5

# How much time to wait between two notifications for one worker.
# (seconds, may be a fractional number)
min_interval = 0.2

# Dry run mode: ask GCM to not actually deliver messages to devices.
dry_run = 0
