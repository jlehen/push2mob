I. DESCRIPTION

py-apnsd is a Python daemon designed to communicate efficiently with the
Apple Push Notification Service (APNS).  It handles both notification and
feedback services.

It is controlled through a ZeroMQ REQ/REP socket with an extremely simple
communication protocol.

The ZeroMQ REQ/REP socket enforces a "ping-pong" semantics.  It is a fatal
error to send two requests or two replies in a row without an intervening
message in the other direction between them.


II. PROTOCOL

1. Commands

There are two commands: "send" and "feedback".  The former is used to...
send notifiations (!) and the latter to get errors about erroneous device
tokens.

Syntax in BNF:

  command = ( send | "feedback" )
  send = "send" expiry number devicetokens payload
  devicetokens = ( devicetoken_hex | devicetoken_base64 ) [ devicetokens ]

- The ``expiry'' is a UNIX epoch date in seconds until which the
  notification staus valid, that is how long APNS will try to deliver
  the notification (a value in the past will make APNS try only once
  before discarding it).
  If the expiry is prefixed with a '+' character, the following number is
  added to the current UNIX time to compute the expiry date.
  Note that the notification may be enqueued for a few seconds in apnsd
  before being send to APNS.
- The ``number'' is the number of following device tokens.  Device tokens
  may be specified in hexadecimal or base64.
- The ``payload'' must not be larger than 256 bytes.  This is a limit
  enforced by APNS.

2. Replies

For each command, the server replies one message, begining with either
"OK" or "ERROR".

In case of error, an informative message follows the "ERROR" string.

For the ``send'' command, the string following "OK" is a space-separated
list of notification ids generated by the command.  The list contains at
least one element.  BNF syntax:

  sendok = "OK" notificationids
  notificationids = number [notificationids]

For the ``feedback'' command, the string following "OK" is a space-separated
list of <timestamp, devicetoken> couples.  The list contains zero or more
elements.  BNF syntax:

  ok = "OK" [feedbacktokens]
  feedbacktokens = timestamp":"devicetoken [feedbacktokens]

- The ``number'' is the number of following feedback tokens.
- The ``timestamp'' is a timestamp in the Unix format, provided by APNS,
  indicating when the APNS determined that the application no longer
  exists on the device.
  You should use the timestamp to determine if the application on the
  device re-registered with your service since the moment the device token
  was recorded on the feedback service. If it hasn.t, you should cease
  sending push notifications to the device.
  If the timestamp is 0, this means that the APNS thinks it is an invalid
  token.


III. EXAMPLE:

# Send a notification to one device, using Base64 encoded device token.
REQ> send 1343727824 1 oplo1dgXSxYT5jGmD/L3XjVSRHCT1EkMLBk+/xp5HAY= hello
REP> OK 34

# Send a notification to two devices, using hex encoded device tokens.
REQ> send 1343728733 2 DDE37D652A87B72516D51117B45980852A22CEFAB57ABF84ED11F937ED621007 7B168DB2D8F3EBAE6A0235AFF7CEDAC279ECBA6DDE83099816383E94B3B2020C hello
REP> OK 35 36

# Send a notification using an invalid device token format.
REQ> send 1343728831 1 DEADBEAF hello
REP> ERROR Wrong device token length (6 != 32): DEADBEAF
REQ> send 1343730023 1 oplo1dgXSxYT5jGmD/L3XjVSRHCT1EkMLBk-/xp5HAD= hello
REP> ERROR Wrong base64 encoding for device token: oplo1dgXSxYT5jGmD/L3XjVSRHCT1EkMLBk-/xp5HAD=

# Feedback containing one erronenous device token.
REQ> feedback
REP> OK 7B168DB2D8F3EBAE6A0235AFF7CEDAC279ECBA6DDE83099816383E94B3B2020C

# Feedback containing no erroneous device token.
REQ> feedback
REP> OK


IV. CERTIFICATES

As time of writing, APNS is signed by Entrust.  You can check this using:
  openssl s_client -connect gateway.sandbox.push.apple.com:2195 

This command will show you the certificate used by APNS.  The output is
quite verbose, but you will see a "Certificate chain" section at the
beginning.  Right now it is:

  Certificate chain
   0 s:/C=US/ST=California/L=Cupertino/O=Apple Inc./OU=iTMS Engineering/CN=gateway.sandbox.push.apple.com
     i:/C=US/O=Entrust, Inc./OU=www.entrust.net/rpa is incorporated by reference/OU=(c) 2009 Entrust, Inc./CN=Entrust Certification Authority - L1C
   1 s:/C=US/O=Entrust, Inc./OU=www.entrust.net/rpa is incorporated by reference/OU=(c) 2009 Entrust, Inc./CN=Entrust Certification Authority - L1C
     i:/O=Entrust.net/OU=www.entrust.net/CPS_2048 incorp. by ref. (limits liab.)/OU=(c) 1999 Entrust.net Limited/CN=Entrust.net Certification Authority (2048)

This last line is the root certificate you need to authenticate APNS'
certificate.  On Debian, you can find it in
  /etc/ssl/certs/Entrust.net_Premium_2048_Secure_Server_CA.pem

In case you need it, just ask "Entrust root certificate" to Google and
once you are on the page on Entrust's website, select "Root Certificates"
and download "entrust_2048_ca.cer".  This is the same file as above.



V. DESIGN

The main thread listens on a REP/REQ (ping/pong) ZeroMQ socket for user
commands.  Depending on the configuration file, there are 1 to N threads
connected to the APNS for sending notifications.  There is also one thread
dedicated to the feedback service.

A PersistentQueue class derives the Python's synchronized Queue class but
with a persistent SQLite backend.

Each notification requested by the user through the ZeroMQ socket is
enqueued to the persistent queue of notifications, from which notification
threads retrieve it and relay it to APNS.

The feedback thread periodically connects to the Apple feedback service and
enqueues each message to a persistent queue, which is polled when the user
uses the feedback command through the ZeroMQ socket.
